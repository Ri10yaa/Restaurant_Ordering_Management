package com.project.restaurantOrderingManagement.waiter;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/bill")
public class    billController {
    @Autowired
    private final billService billService;

    public billController(com.project.restaurantOrderingManagement.service.billService billService) {
        this.billService = billService;
    }

    @GetMapping("/{billno}")
    public ResponseEntity<billDTO> getBill(@PathVariable String billno) throws IOException, ClassNotFoundException {
        billDTO billDTO = billService.getBill(Long.parseLong(billno));
        return ResponseEntity.ok(billDTO);
    }
//    @PostMapping("/create")
//    public ResponseEntity<Long> createBill(@RequestBody billDTO bill) throws IOException {
//        if (bill.getWaiterCode() == null || bill.getWaiterCode().isEmpty()) {
//            throw new IllegalArgumentException("waiterCode cannot be null or empty");
//        }
//        System.out.println(bill.getWaiterCode());
//        Long billNo = billService.storeBill(bill);
//        return ResponseEntity.ok(billNo);
//    }

//    @GetMapping("/close")
//    public ResponseEntity<List<Order>> closeBill(@RequestBody String billNo, @RequestBody Map<String, String> requestBody) {
//        List<Order> orders = billService.closeBill(Long.parseLong(requestBody.get("billNo")));
//        return ResponseEntity.ok().build();
//
//    }
}




package com.project.restaurantOrderingManagement.waiter;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.Collections;
import java.util.*;
import java.util.Optional;

@RestController
@RequestMapping("/order")
public class orderController {
    @Autowired
    private final OrderService orderService;
    public orderController(OrderService orderService) {
        this.orderService = orderService;
    }

    @GetMapping("/{billno}")
    public ResponseEntity<List<Order>> getOrders(@PathVariable("billno") String billno) throws IOException {
        List<Order> orders = orderService.getOrders(Long.parseLong(billno));
        if(orders.isEmpty()) {
            return null;
        }
        return ResponseEntity.ok(orders);
    }

    @PostMapping("/{billno}")
    public ResponseEntity<Object> createOrder(@PathVariable String billno, @RequestBody Order order) throws IOException {
        System.out.println("Foodcode : " + order.getFoodCode());
        System.out.println("Quantity : " + order.getQuantity());
        System.out.println("Status : " + order.getStatus());
        orderService.storeOrder(Long.parseLong(billno), order);
        return ResponseEntity.ok().build();
    }

    @PutMapping("/{billno}")
    public ResponseEntity<Object> updateOrder(@PathVariable("billno") String billno, @RequestBody Order order) throws IOException {
        orderService.updateFoodItem(Long.parseLong(billno), order);
        return ResponseEntity.ok().build();
    }

    @DeleteMapping("/{billno}")
    public ResponseEntity<Object> deleteOrder(@PathVariable("billno") String billno,
                                              @RequestBody Map<String, String> requestBody) throws IOException {
        System.out.println("Received request to delete food item.");
        System.out.println("Bill No: " + billno);
        System.out.println("Request Body: " + requestBody);

        String foodCode = requestBody.get("foodCode");
        System.out.println(foodCode);
        if (foodCode == null || foodCode.trim().isEmpty()) {
            return ResponseEntity.badRequest().body("FoodCode is missing in request body.");
        }

        List<Order> orders = Optional.ofNullable(orderService.getOrders(Long.parseLong(billno)))
                .orElse(Collections.emptyList());

        if (orders.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("No orders found.");
        }

        Optional<Order> optionalOrder = orders.stream()
                .filter(order -> order.getFoodCode().equalsIgnoreCase(foodCode))
                .findFirst();

        if (!optionalOrder.isPresent()) { // Java 8 alternative to isEmpty()
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Food item not found.");
        }

        Order orderToUpdate = optionalOrder.get();
        orderToUpdate.setStatus("Deleted");

        orderService.updateFoodItem(Long.parseLong(billno), orderToUpdate);

        return ResponseEntity.ok("Order status updated to Deleted.");
    }

}
